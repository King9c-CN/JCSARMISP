<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\code.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\code.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6210000: Last Updated: Fri Jul  5 10:37:10 2024
<BR><P>
<H3>Maximum Stack Usage =         24 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
KEY1_Handler &rArr; KEY1
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1]">KEY0_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[2]">KEY1_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[3]">KEY2_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[4]">KEY3_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[5]">UART_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[7]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_cmsdk_cm0.o(.text)
 <LI><a href="#[6]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[7]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(.text)
</UL>
<P><STRONG><a name="[18]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[8]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[19]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1a]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1b]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1c]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1d]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UART_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Handler &rArr; UARTHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>KEY0_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KEY0_Handler &rArr; KEY0
</UL>
<BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>KEY1_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = KEY1_Handler &rArr; KEY1
</UL>
<BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>KEY2_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KEY2_Handler &rArr; KEY2
</UL>
<BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>KEY3_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KEY3_Handler &rArr; KEY3
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>__scatterload</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1e]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>KEY0</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, keyboard.o(.text.KEY0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KEY0
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAwbParam
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteUART
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_gpio_led
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_isp_bypass
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_sdcard_reset
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_sdcard_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY0_Handler
</UL>

<P><STRONG><a name="[c]"></a>KEY1</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, keyboard.o(.text.KEY1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = KEY1
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAwbParam
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteUART
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_gpio_led
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_isp_bypass
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_sdcard_reset
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_sdcard_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY1_Handler
</UL>

<P><STRONG><a name="[d]"></a>KEY2</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, keyboard.o(.text.KEY2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KEY2
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteUART
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_gpio_led
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_isp_bypass
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_sdcard_reset
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_sdcard_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY2_Handler
</UL>

<P><STRONG><a name="[e]"></a>KEY3</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, keyboard.o(.text.KEY3))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KEY3
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteUART
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_gpio_led
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_isp_bypass
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_sdcard_reset
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_sdcard_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY3_Handler
</UL>

<P><STRONG><a name="[16]"></a>ReadUART</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, code_def.o(.text.ReadUART))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTHandle
</UL>

<P><STRONG><a name="[11]"></a>SetAwbParam</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, code_def.o(.text.SetAwbParam))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY1
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY0
</UL>

<P><STRONG><a name="[10]"></a>Set_gpio_led</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, code_def.o(.text.Set_gpio_led))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTHandle
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY3
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY2
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY1
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY0
</UL>

<P><STRONG><a name="[14]"></a>Set_isp_bypass</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, code_def.o(.text.Set_isp_bypass))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTHandle
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY3
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY2
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY1
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY0
</UL>

<P><STRONG><a name="[12]"></a>Set_sdcard_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, code_def.o(.text.Set_sdcard_addr))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTHandle
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY3
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY2
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY1
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY0
</UL>

<P><STRONG><a name="[13]"></a>Set_sdcard_reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, code_def.o(.text.Set_sdcard_reset))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTHandle
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY3
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY2
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY1
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY0
</UL>

<P><STRONG><a name="[17]"></a>Setvgaen</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, code_def.o(.text.Setvgaen))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a]"></a>UARTHandle</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, keyboard.o(.text.UARTHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UARTHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteUART
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUART
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_gpio_led
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_isp_bypass
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_sdcard_reset
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_sdcard_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Handler
</UL>

<P><STRONG><a name="[15]"></a>WriteUART</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, code_def.o(.text.WriteUART))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTHandle
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY3
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY2
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY1
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY0
</UL>

<P><STRONG><a name="[6]"></a>main</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setvgaen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1f]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[20]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[21]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
